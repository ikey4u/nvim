function! GetIgnores()

" 获取 g:VimRoot 变量
call FindWorkingDir()

" 读取 .vimignore 文件, 并设置 g:GetIgnores 变量
python3 <<====EOF
import vim
import os
from pathlib import Path

def get_ignores(pth):
    ''' 读取项目根目录下的 .vimignore 文件, 返回一个列表

    忽略 .vimignore 文件中以 # 号开头的行,
    如果某行以 '*.' 开头, 则将 '*.' 替换为 '.'

    '''

    ignores = []
    if not pth.exists():
        return ignores

    with open(pth, 'r') as _:
        for line in _:
            line = line.strip()
            if len(line) == 0 or line.startswith('#'):
                continue
            ignores.append(line)
    ignores = sorted(list(set(ignores)))
    return ignores

ignores = get_ignores(Path(vim.eval("g:VimRoot"), '.vimignore'))
vim.command("let g:VimIgnoresRaw = %s" % ignores)
====EOF

" Nerdtree 的忽略列表样例如下所示
"
"     let NERDTreeIgnore = [ '\.o$' ]
"
" 但是由于 python 中 get_ignores 返回值中如果包含有反斜线,
" 那么设置到 vim 变量 NERDTreeIgnore 上将会得到
"
"     let NERDTreeIgnore = [ '\\.o$' ]
"
" 这个问题无法得到有效的解决, 因此, 这里需要遍历 python 中返回的列表,
" 如果检测到以 '.' 开始的行, 则手动加上反斜线.
"
" 另外注意以下两种形式的差别
"
"     let NERDTreeIgnore = [ '\.o$' ]
"     let NERDTreeIgnore = [ '.o$' ]
"
" 第一个列表将仅仅忽略文件名后缀为 .o 的文件, 而第二种模式不仅会忽略以 .o 为后缀
" 的文件, 同时也会忽略包含后缀为 .o 的文件的祖先目录

let g:VimIgnores = []
for item in g:VimIgnoresRaw
    if item[0] == '.'
        let item = '\' . item
    endif
    if index(g:VimIgnores, item) < 0
        let g:VimIgnores += [item]
    endif
endfor
endfunction

" call GetIgnores()
" let NERDTreeIgnore = g:VimIgnores

" 让 nerdtree 忽略常见的临时文件
set wildignore+=*.pyc,*.o,*.obj,*.svn,*.swp,*.class,*.hg,*.DS_Store,*.min.*,*__pycache__*,*.db,*.xcodeproj
let NERDTreeRespectWildIgnore=1

" :IgnoreUpdate => 从 .vimignore 更新 Nerdtree 忽略的文件
command! -nargs=0 IgnoreUpdate call GetIgnores() | let NERDTreeIgnore = g:VimIgnores

" <leader>r => 刷新 nerdtree 目录到当前工作目录
noremap <leader>r :IgnoreUpdate<cr> <bar> :NERDTreeFind<cr>
