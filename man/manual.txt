---
Title: neovim
Date: 2020-07-02
Author: bugnofree
---

# 基础配置

- python 支持

    安装 neovim (略), 然后安装 neovim 的 python 支持.

        pip3 install neovim

- 安装插件管理器

    推荐使用 plug.vim, 安装方法如下

        curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

- 安装 neovim-remote

    项目地址: https://github.com/mhinz/neovim-remote, 安装方法如下

        pip3 install neovim-remote

    在 zshrc 中配置如下

        # neovim {
            export PATH="$HOME/.usr/nvim/bin":$PATH
            # open with servername (neovim-remote)
            alias xvim="nvim --listen /tmp/nvim "
            # split open
            alias xvims="nvr --servername /tmp/nvim -o "
            # vertical split open
            alias xvimvs="nvr --servername /tmp/nvim -O "
            # tab open
            alias xvimt="nvr --servername /tmp/nvim --remote-tab "
        # }

- 自动补全/coc

    安装 nodejs, 建议采用 n 工具进行安装.

        export N_PREFIX="$HOME/.usr/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"
        curl -L https://git.io/n-install | bash

    安装完成之后在 plug 中添加插件如下并安装.

        Plug 'neoclide/coc.nvim', {'branch': 'release'}

    重新打开 nvim 安装插件

    - snippets 补全

            :CocInstall coc-snippets

    - python 补全

        命令行安装

            pip3 install jedi

        neovim 安装

            :CocInstall coc-python

        然后 :CocConfig 打开 coc 的配置文件, 在里面写入默认 python 路径

            {
                "python.pythonPath": "~/.pyenv/shims/python"
            }

        如果不配置, 可以在 neovim 中打开 python 文件后, 执行如下命令选择 python 解释器

            :CocCommand python.setInterpreter

    - C 家族补全

         需要手动下载 clangd 并加入到环境变量中 (https://github.com/clangd/coc-clangd),
         然后在 neovim 中执行

            :CocInstall coc-clangd

# 插件配置/plugin

- nerdcommenter

    常用快捷键

        \cm: /**/ 方式注释行,或者将选中的行紧凑的包起来:comment minimal line
        \c<space> :切换行的状态(注释->非注释,非注释->注释)
        \cs:良好格式的块注释 /**/:comment sexy line
        \cu:取消注释:comment undo
        \ca:切换可选的注释方式, 如 C/C++ 的块注释和行注释

    注释后面自动加空格

- vim-easymotion

    正常情况下使用 w 是向前移动一个单词, 如果单词比较靠后,
    那么我们需要按多次 w, 使用该插件可以快速移动.

    快速按下 <leader><leader>w 就可以在当前行执行搜索,
    每一个单词首字母被高亮, 按下高亮字符即可调整.

    类似的 <leader><leader>j 是用于向行下跳转,
    配合 k 可以向上跳转, 配合 s 可以在当前行搜索字符.

- vim-surround

    - 修改和删除

        cs(change surround), ds(delete surround).
        cs 和 ds 接受两个字符, 第一个为源字符, 第二个为目标字符.

    - 添加

        ys(you surround): 第一个参数是一个 vim motion 或者文本对象,
        第二个参数是要 wrap 的字符. 比如 ysw' 表示 表示将当前光标所在的单词用单
        引号包含起来, 对于空格, 举个例子, ysw) 不会添加空格, 而 ysw( 会添加空格.
        特别的 yss 是一个特殊的命令, 用来处理当前行.

    - 特殊字符

        有一些特殊字符, 比如 b, B, r, a 分别可以表示 ), }, ] 和  >
        比如 yswb 表示将当前单词用 () 括起来.

- ctags

    安装编译依赖

        brew install cmake automake pkg-config docutils jansson libyaml

    下载源码编译

        git clone https://github.com/universal-ctags/ctags.git
        cd ctags/
        ./autogen.sh
        ./configure --prefix=$HOME/.usr/ --program-prefix=ex
        make && make install

    编译会生成 exctags, exreadtags 并安装到 $HOME/.usr/bin 目录下面.

- nerd-fonts

    安装 nerd-fonts

        git clone https://github.com/ryanoasis/nerd-fonts.git
        cd nerd-fonts
        ./install.sh

    查看安装的字体

        fc-list | rg 'Nerd Font'

    其中 Source Code Pro 字体的名称为 Sauce Code Pro


- vim-devicons

    各种图标显示, 依赖于字体 nerd-fonts

- leaderf

    配置 ctags 程序, 安装方法见本手册的 ctags 节.

        let g:Lf_Ctags = "exctags"

    用法

        :Leaderf <subcommand>

    leaderf 的主要作用还是用来查找文件, 所以我们需要告诉 LeaderF 从哪里开始查找,
    定义如下变量(元素可以自己随便定义)

        let g:Lf_RootMarkers = ['.git', '.svn', '.vimroot']

    只定义这个是不行的, 还需定义工作目录模式

        let g:Lf_WorkingDirectoryMode = '<mode>'

    <mode> 有如下几种

        - c 设置工作目录为当前工作目录(默认)
        - a [当前工作目录] 的最近的包含了 RootMarkers 的祖先目录
        - A [  当前文件  ] 的最近的包含了 RootMarkers 的祖先目录
        - f 当前文件的目录

    本配置中设置 mode 为 'Ac'.

        let g:Lf_WorkingDirectoryMode = 'Ac'

    本配置的 Leaderf 快捷键为

    - <leader>w 搜索光标下的文本
    - :Lf 搜索文件, 不好使的时候使用 fzf 的 <leader>F
    - :Lreg 搜索正则表达式文本
    - :Lword 搜索文本, f 表示 find 文本
    - :Lcs 用于查看不同颜色主题, 按 <C-p> 预览
    - :Lfn 函数
    - :Lmru 最近使用的文件

    在搜索结果窗口中的移动快捷键如下

    - <C-j> <C-k> 在搜索结果中向下向上移动
    - <ESC> 或者 <C-C> 退出 LeaderF
    - <C-R> 在 fuzzy 搜索和 regex 搜索模式间切换
    - <Tab>

        切换为 vim 的 normal 模式, 可以在结果中移动, 然后回车即可选择文件,
        注意 tab 切换成 vim normal 模式时, 当你切换到其他工作窗口时,
        工作路径不会自动切换为被编辑文件所在路径, 需要恢复到 Leaderf
        原来的模式才会自动切换工作路径.

    - <C-V> 从剪贴板粘贴
    - <C-X> 水平窗口打开
    - <C-]> 垂直窗口打开
    - <C-T> tab 中打开
    - <C-P> 预览结果

    Leaderf 在显示窗口中的字体如果无法正常显示, 则需要安装 nerd-fonts,
    安装方法见本手册的 nerd-fonts 一节, 安装完 nerd-fonts 需要将终端字体或者含有
    nvim 的 GUI 字体设置为含有 nerd 的字体, 注意 source code pro 的 nerd-fonts
    字体名称为 SauceCodePro.

- fzf

    - 安装

        在系统上安装 fzf

            git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
            ~/.fzf/install

        安装完成后在 Plug 里面配置如下即可

            Plug '~/.fzf'
            Plug 'junegunn/fzf.vim'

        然后执行 :PlugInstall 即可.

    - 用法

        - 文件搜索 <leader>F

            配置快捷键 <leader>F 在工作目录搜索, 为此写了一个 FindWorkingDir 函数,

            配置 fzf 搜索文件的快捷为 <leader>F

                noremap <leader>F :call FindWorkingDir()<CR> :<C-U><C-R>=printf("Files %s", eval('g:VimRoot'))<CR><CR>

            这里先调用 FindWorkingDir 设置工作目录, 然后将命令打印到命令行上在执行.

        - 搜索结果中移动

            在搜索结果中, 可以使用 ctrl-j, ctrl-k 上下移动光标,
            使用 ctrl-t, ctrl-x, ctrl-v 分别在 tab, 水平, 垂直划分打开.
